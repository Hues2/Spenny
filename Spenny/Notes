APP FUNCTIONALITY:

- User can set monthly income
- This monthly income is the amount that the user will start with at the start of each month
- User can input monthly direct debits, which wil be automatically deducted at the start of each month from the "monthly income"
- User can set a "Savings Goal" at the start of each month
- At the end of the month, if money is left over, then this will be counted as the "saved amount"
- Depending on the "Savings Goal" amd the actual "savings amount", the number will be green (if saved money (+)) or red (no savings (-)) depending on the 2 values


APP DESIGN:

- Home page will display the remaining amount for the month at the top
- Under this header, there will be a simple list of income and outcomes for that month so far
- Top of the list will have a "+" button to add a spend
- The header will have a small "Savings Goal", where a simple alert with the users saving goal can be inputted
- If there is  asavings goal, then under the total remaining amount, there will be a percentage
    that represents the amount over or under the goal

- Second view will be a list with all of the previous months


APP TODO:

- On home screen, show a progressview
- In the init of the view model, it will try to get the data
- If it gets data, then display it
- If it can't get the data, then set it to nil, and stop showing the progressview, and show the get started button
- In init of data manager, try to get the data from core data
- Pass the data manager down through dependency injection

- Create two more models, PayOut and PayIn
- Each of these models will have:
    - let date: Date/String
    - let amount: Double
    - let transactionType: TransactionType

- Create an enum that represents the type of transaction. Example types ->
    - Direct Debit  --> Which will be an enum too, with these types: Car, Rent, Phone, Spotify, etc...
    - Food
    - Drinks
    - Paid a friend
    - Other
    
- When user adds a direct debit or a payment, add a horizontal scrollview with these types with their icon and name inside a color pill shape





WORKING ON NOW:
    
    - Make reusable component, which will be used to add a transaction or direct debit
    - The component will have a delete and save button next to the textfields, so that when the user is done adding all the info thet can save that Transaction
    - When the save button is clicked it will add it to the list of transactions or direct debits (depeneding on the isDirectDebit bool in the component)
    
