APP FUNCTIONALITY:

- User can set monthly income
- This monthly income is the amount that the user will start with at the start of each month
- User can input monthly direct debits, which wil be automatically deducted at the start of each month from the "monthly income"
- User can set a "Savings Goal" at the start of each month
- At the end of the month, if money is left over, then this will be counted as the "saved amount"
- Depending on the "Savings Goal" amd the actual "savings amount", the number will be green (if saved money (+)) or red (no savings (-)) depending on the 2 values


APP DESIGN:

- Home page will display the remaining amount for the month at the top
- Under this header, there will be a simple list of income and outcomes for that month so far
- Top of the list will have a "+" button to add a spend
- The header will have a small "Savings Goal", where a simple alert with the users saving goal can be inputted
- If there is  asavings goal, then under the total remaining amount, there will be a percentage
    that represents the amount over or under the goal

- Second view will be a list with all of the previous months


APP TODO:

- Add validation for the texfields
- An empty list will be above the add direct debit text
- When the add direct debit text is pressed, the view below it (AddTransaction) will appear
- The text will then dissapear, so that the user cant make the addTransaction view dissappear
- Once the user clicks the save or delete button, the Transaction will be added to the list (in this case, to the list of direct debits), and then it will appear in the list
- All the data in the add transaction view will be wiped aand then it will be taken off the screen
- And then the add direct debit text will appear again


- On home screen, show a progressview
- In the init of the view model, it will try to get the data
- If it gets data, then display it
- If it can't get the data, then set it to nil, and stop showing the progressview, and show the get started button
- In init of data manager, try to get the data from core data
- Pass the data manager down through dependency injection


- When user adds a direct debit or a payment, add a horizontal scrollview with these types with their icon and name inside a color pill shape





WORKING ON NOW:

- When saving the spenny data, the list of transactions needs to conform to the model in core data
- So inside for loop make each transaction from scrap with the available data
    





















import SwiftUI

@main
struct SpennyApp: App {
    
    var body: some Scene {
        WindowGroup {
            if let viewContext = CoreDataManager.shared.container.viewContext{
                AppView()
                    .environment(\.managedObjectContext, viewContext)
            }
            
        }
    }
}








class CoreDataManager{
    
    let container: NSPersistentContainer
    
    static let shared = CoreDataManager()
    
    
    private init(){
        container = NSPersistentContainer(name: "SpennyDataModel")
        container.loadPersistentStores { description, error in
            if let error = error{
                print("\n \(error.localizedDescription) \n")
            }
        }
    }
    
}










//
//  GetStartedModal.swift
//  Spenny
//
//  Created by Greg Ross on 12/09/2022.
//

import SwiftUI


struct GetStartedModalViewModifier: ViewModifier{
    var dataManager: DataManager
    @Binding var showModal: Bool
    
    func body(content: Content) -> some View {
        ZStack(alignment: .bottom){
            content
                .zIndex(0)
            
            if showModal{
                GetStartedModal(dataManager: dataManager, showModal: $showModal)
                    .zIndex(1)
                    .transition(.move(edge: .bottom))
                    .animation(.spring(), value: showModal)
            }
        }
    }
}


struct GetStartedModal: View{
    @StateObject var vm: ModalViewModel
    @Environment(\.managedObjectContext) var viewContext
    @FetchRequest(entity: SpennyEntity.entity(), sortDescriptors: []) var entities: FetchedResults<SpennyEntity>
    
    @Binding var showModal: Bool
    @State private var offset = CGFloat.zero
    @State var isAddingTransaction: Bool = false
    
    init(dataManager: DataManager, showModal: Binding<Bool>){
        self._vm = StateObject(wrappedValue: ModalViewModel(dataManager: dataManager))
        self._showModal = showModal
    }
    
    var body: some View{
        
        VStack(alignment: .center, spacing: 0){
            
            List(entities, id:\.self){ entity in
                Text("\(entity.monthlyIncome.toFormattedString(format: "%.2f"))")
                    .onAppear{
                        print("\n \(entity.transactions?.allObjects) \n")
                    }
            }
            
            
            // MARK: Button Row
            buttonRow
                .padding(.bottom, 5)
            
            ScrollView(showsIndicators: false){
                
                ScrollViewReader{ proxy in
                    
                    //MARK: Monthly Income Field
                    monthlyIncomeField
                    
                    //MARK: Savings Goal Field
                    savingsGoalField
                        .padding(.bottom, 20)
                    
                    // MARK: List Of Added Direct Debits
                    listOfTransactions
                    
                    // MARK: Add Direct Debit Button Text
                    addDirectDebitText
                    
                    //MARK: Optional Direct Debits Field
                    addTransactionsField
                        .id("proxy_addTransactionsField")
                    
                    // MARK: Save Info Button
                    saveToCoreDataButton
                        .onChange(of: isAddingTransaction) { newValue in
                            withAnimation(.spring()) {
                                proxy.scrollTo("proxy_addTransactionsField")
                            }
                        }
                }
            }
        }
        .addModalModifiers(showModal: $showModal, offset: $offset, dismissModal: dismissModal)
        
    }
}


extension GetStartedModal{
    
    //MARK: Views
    private var buttonRow: some View{
        HStack{
            Spacer()
            
            Button {
                dismissModal()
            } label: {
                Circle()
                    .fill(RadialGradient(gradient: Gradient(colors: [.mint, .teal, .cyan, .blue]), center: .center, startRadius: 5, endRadius: 15))
                    .frame(width: 25, height: 25)
                    .mask {
                        Image(systemName: "x.circle.fill")
                            .font(.title2)
                    }
            }
            .padding(.horizontal)
            .padding(.bottom, 10)
        }
        .contentShape(Rectangle())
    }
    
    private var monthlyIncomeField: some View{
        ModalTextField(title: "Monthly Income", placeholder: "£1250.00", amount: $vm.dataManager.monthlyIncome, isValidAmount: $vm.monthlyIncomeIsValid)
            .clipped()
            .padding(.top, 10)
    }
    
    private var savingsGoalField: some View{
        ModalTextField(title: "Savings Goal", placeholder: "£90.00", amount: $vm.dataManager.savingsGoal, isValidAmount: $vm.savingsGoalIsValid)
            .clipped()
    }
    
    private var listOfTransactions: some View{
        VStack{
            
            if !vm.dataManager.transactions.isEmpty{
                HStack{
                    Text("Transactions:")
                        .font(.title3)
                        .fontWeight(.semibold)
                        .foregroundColor(.accentColor)
                    
                    Spacer()
                }
                .padding(.horizontal)
            }
            
            ForEach(vm.dataManager.transactions){ transaction in
//            ForEach(ListOfTransactionTypes.listofFakeTransactions){ transaction in
                TransactionRow(transaction: transaction)
                    .transition(.move(edge: .leading))
                    .frame(maxWidth: .infinity)
                    .padding(.horizontal)
            }
        }
    }
    
    @ViewBuilder private var addDirectDebitText: some View{
        if !isAddingTransaction{
            HStack(spacing: 3){
                Image(systemName: "plus.circle")
                Text("Add a transaction")
                    .fontWeight(.light)
                Spacer()
            }
            .font(.subheadline)
            .foregroundColor(.accentColor)
            .containerShape(Rectangle())
            .onTapGesture {
                withAnimation {
                    isAddingTransaction = true
                }
            }
            .padding(.horizontal)
        }
    }
    
    @ViewBuilder private var addTransactionsField: some View{
        if isAddingTransaction{
            AddTransaction(dataManager: vm.dataManager, isAddingTransaction: $isAddingTransaction)
                .zIndex(1)
                .transition(.asymmetric(insertion: .move(edge: .leading), removal: .move(edge: .trailing)))
        }
    }
    
    @ViewBuilder private var saveToCoreDataButton: some View{
        if !isAddingTransaction{
            Button {
                print("\n Should check if the entered data is valid, and if it is, save it to core data \n")
                let test1 = SpennyEntity(context: viewContext)
                test1.monthlyIncome = vm.dataManager.monthlyIncome!
                test1.savingsGoal = vm.dataManager.savingsGoal!
                print("\n About to add the transdaction. This is the list of transaction in the data manager: \(vm.dataManager.transactions) \n")
                test1.transactions?.addingObjects(from: vm.dataManager.transactions)
                
                for transaction in vm.dataManager.transactions {
                    
                    let transactionEntity = TransactionEntity(context: viewContext)
                    transactionEntity.title = transaction.title
                    transactionEntity.amount = transaction.amount
                    transactionEntity.date = transaction.date
                    transactionEntity.spenny = test1
                    transactionEntity.isDirectDebit = transaction.isDirectDebit
                    transactionEntity.colorHex = transaction.transactionType.colorHex
                    transactionEntity.typeTitle = transaction.transactionType.title
                    transactionEntity.iconName = transaction.transactionType.iconName
                    test1.transactions?.adding(transactionEntity)
                    print("\n \(transactionEntity) \n")

                    do{
                        try viewContext.save()
                    } catch{
                        print("\n \(error.localizedDescription) \n")
                    }
                }
                
                do{
                    try viewContext.save()
                } catch{
                    print("\n \(error.localizedDescription) \n")
                }
                
                
                
                
            } label: {
                Text("Save")
                    .fontWeight(.bold)
                    .withSpennyButtonLabelStyle()
            }
            .transition(.asymmetric(insertion: .move(edge: .leading), removal: .move(edge: .trailing)))
            .buttonStyle(SpennyButtonStyle())
            .padding(.top, 10)
        }
        
        
    }
    
    
    
    //MARK: - Functionality
    private func dismissModal(){
        withAnimation(.easeInOut) {
            showModal.toggle()
        }
    }
    
}


extension View{
    func withGetStartedModal(dataManager: DataManager, showModal: Binding<Bool>) -> some View{
        modifier(GetStartedModalViewModifier(dataManager: dataManager, showModal: showModal))
    }
}

